# ====================================================================
# DOCKER COMPOSE - INFRASTRUCTURE ACFC
# ====================================================================
# Configuration de l'architecture micro-services pour l'application ACFC
#
# Services déployés :
# - acfc-app      : Application web Flask
# - acfc-api-back : API interne FastAPI
# - acfc-nginx    : Reverse proxy et serveur statique (port 80)
# - acfc-db       : Base de données MariaDB
# - acfc-logs     : Base NoSQL MongoDB pour logging des traces
#
# Réseau : acfc-network (isolé, communication inter-services)
# Volumes : Persistance des données (base, logs, documents --factures, commandes, remises de chèques--)
#
# Environnement : Development/Production (configurable via .env)
# Maintenu par : Rémi Verschuur
# Version : 1.0

services:
  # ================================================================
  # SERVICE APPLICATION WEB FLASK
  # ================================================================
  acfc-app:
    container_name: acfc-app
    build:
      context: .                              # Build depuis la racine du projet
      dockerfile: app_acfc/dockerfile.app     # Dockerfile spécialisé application
    ports:
      - "5000:5000"                           # Mapping port Flask (dev uniquement)
    volumes:
      - ./logs:/app/logs:z                    # Volume pour logs (persistance)
      - acfc_official_documents_storage:/app/official:Z
    env_file:
      - .env-common
      - .env-path
      - .env-app
    networks:
      - acfc-network                          # Réseau privé inter-services
    depends_on:
      acfc-db:
        condition: service_healthy            # Attendre que la BDD soit prête
      acfc-logs:
        condition: service_healthy            # Attendre que MongoDB soit prêt
    restart: unless-stopped                   # Redémarrage automatique sauf arrêt manuel
  
  # ================================================================
  # SERVICE REVERSE PROXY NGINX
  # ================================================================
  acfc-proxy:
    container_name: acfc-nginx
    image: nginx:1.29.1                      # Image officielle Nginx
    ports:
      - "80:80"                              # Port HTTP standard
      - "443:443"                            # Port HTTPS (certificats à configurer)
    volumes:
      - ./nginx/:/etc/nginx/:Z               # Configuration personnalisée
    networks:
      - acfc-network
    depends_on:
      - acfc-app                             # Démarre après l'application
    restart: unless-stopped

  # ================================================================
  # SERVICE BASE DE DONNÉES MARIADB
  # ================================================================
  acfc-db:
    container_name: acfc-db
    build:
      context: .                             # Dossier contenant Dockerfile et scripts
      dockerfile: ./mariadb/dockerfile.mariadb         # Dockerfile spécialisé MariaDB
    restart: always                          # Redémarrage permanent (service critique)
    env_file:
      - .env-common
      - .env-db
    volumes:
      - acfc-db-data:/var/lib/mysql          # Persistance des données
      - ./mariadb/:/docker-entrypoint-initdb.d/:z  # Script d'initialisation
    healthcheck:
      # Vérification de santé pour démarrage ordonné des services
      # Test avec l'utilisateur application pour s'assurer qu'il est créé et fonctionnel
      test: ["CMD", "sh", "-c", "mariadb -u$$MYSQL_USER -p$$MYSQL_PASSWORD -hlocalhost -D$$MYSQL_DATABASE -e 'SELECT 1;'"]
      interval: 15s                          # Vérification toutes les 15 secondes
      timeout: 10s                           # Timeout par tentative plus long
      retries: 20                            # Plus de tentatives (script init long)
      start_period: 45s                      # Délai avant premier test (init DB)
    networks:
      - acfc-network

  # ================================================================
  # SERVICE LOGGING MONGODB
  # ================================================================
  acfc-logs:
    container_name: acfc-logs
    build:
      context: .                              # Dossier contenant Dockerfile et scripts
      dockerfile: mongo/dockerfile.mongo      # Dockerfile spécialisé MongoDB
    volumes:
      - acfc-logs-data:/data/db              # Persistance des logs
      - ./mongo/mongod.conf:/etc/mongod.conf:ro           # Configuration MongoDB
    env_file:
      - .env-common
      - .env-mongo
    networks:
      - acfc-network
    restart: always
    healthcheck:
      # Test de connectivité MongoDB (compatible avec différentes versions)
      test: ["CMD-SHELL", "mongo --eval 'db.adminCommand({ping: 1})' --quiet || mongosh --eval 'db.adminCommand({ping: 1})' --quiet"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 30s

  # ================================================================
  # SERVICE FAST API (BACK-OFFICE, INTERNE, GESTIONS ASYNCHRONES, MAILS)
  # ================================================================
  acfc-api-back:
    container_name: acfc-api-back
    build:
      context: .
      dockerfile: api_acfc/dockerfile.api
    volumes:
      - ./api_acfc:/app
      - acfc-queues:/data
    networks:
      - acfc-network
    env_file:
      - .env-api
    restart: unless-stopped
    # Aucun port exposé, usage interne uniquement (autres conteneurs ou cron)

# ================================================================
# VOLUMES PERSISTANTS
# ================================================================
# Stockage persistant des données pour survie aux redémarrages
volumes:
  acfc-db-data:
    driver: local                            # Stockage local pour données MariaDB
    name: acfc_database_data
  acfc-logs-data:
    driver: local                            # Stockage local pour logs MongoDB
    name: acfc_logs_data
  acfc_official_documents_storage:
    driver: local                            # Stockage pour documents PDF
    name: acfc_official_documents_storage
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/official
  acfc-queues:
    driver: local                            # Stockage pour files d'attente (si besoin futur)
    name: acfc_queues_storage
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/queues

# ================================================================
# RÉSEAUX
# ================================================================
# Réseau privé pour communication sécurisée inter-services
networks:
  acfc-network:
    driver: bridge                           # Driver bridge pour isolation réseau
    name: acfc_internal_network
    ipam:
      config:
        - subnet: 172.20.0.0/16             # Sous-réseau privé dédié