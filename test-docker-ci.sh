#!/usr/bin/env bash

# Script de test du workflow Docker CI en local
# Simule les √©tapes principales du workflow GitHub Actions

set -e

echo "üß™ Test du workflow Docker Compose CI"
echo "====================================="

# Variables
COMPOSE_FILE="docker-compose.yml"
HEALTH_URL="http://localhost:5000/health"
TIMEOUT=120

echo "1Ô∏è‚É£ Validation de la syntaxe docker-compose..."
docker compose -f $COMPOSE_FILE config --quiet
echo "‚úÖ Syntaxe valide"

echo ""
echo "2Ô∏è‚É£ Build des images..."
docker compose -f $COMPOSE_FILE build --parallel
echo "‚úÖ Images build√©es"

echo ""
echo "3Ô∏è‚É£ D√©marrage des services..."
docker compose -f $COMPOSE_FILE up -d

echo ""
echo "4Ô∏è‚É£ Attente de la disponibilit√© des services..."

# Attendre MariaDB
echo "   Attente de MariaDB..."
timeout $TIMEOUT bash -c 'until docker compose -f docker-compose.yml ps acfc-db | grep -q "healthy\|Up"; do sleep 2; done' || {
    echo "‚ùå MariaDB n'est pas pr√™t"
    docker compose -f $COMPOSE_FILE logs acfc-db
    exit 1
}
echo "   ‚úÖ MariaDB pr√™t"

# Attendre MongoDB
echo "   Attente de MongoDB..."
timeout 60 bash -c 'until docker compose -f docker-compose.yml exec -T acfc-logs mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done' || {
    echo "‚ö†Ô∏è MongoDB non accessible (continuer quand m√™me)"
}
echo "   ‚úÖ MongoDB pr√™t"

# Attendre Flask
echo "   Attente de Flask..."
timeout 60 bash -c 'until curl -f '$HEALTH_URL' > /dev/null 2>&1 || curl -f http://localhost:5000/ > /dev/null 2>&1; do sleep 2; done' || {
    echo "‚ùå Flask app non accessible"
    docker compose -f $COMPOSE_FILE logs acfc-app
    exit 1
}
echo "   ‚úÖ Flask pr√™t"

echo ""
echo "5Ô∏è‚É£ Tests de sant√©..."

# Test endpoint de sant√©
if curl -f -s $HEALTH_URL > /tmp/health_response.json; then
    echo "‚úÖ Endpoint /health accessible"
    echo "   R√©ponse:"
    cat /tmp/health_response.json | python -m json.tool || cat /tmp/health_response.json
else
    echo "‚ùå Endpoint /health non accessible"
    curl -v $HEALTH_URL || true
fi

# Test endpoint principal
if curl -f -s http://localhost:5000/ > /dev/null; then
    echo "‚úÖ Endpoint / accessible"
else
    echo "‚ùå Endpoint / non accessible"
fi

# Test proxy Nginx
if curl -f -s http://localhost:80/ > /dev/null; then
    echo "‚úÖ Nginx proxy accessible"
else
    echo "‚ö†Ô∏è Nginx proxy non accessible (continuer quand m√™me)"
fi

echo ""
echo "6Ô∏è‚É£ Status des conteneurs:"
docker compose -f $COMPOSE_FILE ps

echo ""
echo "7Ô∏è‚É£ Nettoyage..."
docker compose -f $COMPOSE_FILE down --volumes --remove-orphans

echo ""
echo "üéâ Test termin√© avec succ√®s !"
