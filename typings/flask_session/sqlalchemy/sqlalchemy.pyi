"""
This type stub file was generated by pyright.
"""

from typing import Optional
from flask import Flask
from flask_sqlalchemy import SQLAlchemy     # type: ignore
from ..base import ServerSideSession, ServerSideSessionInterface

class SqlAlchemySession(ServerSideSession):
    ...


def create_session_model(db, table_name, schema=..., bind_key=..., sequence=...): # -> type[Session]:   # type: ignore
    class Session(db.Model): # type: ignore
        ...
    
    

class SqlAlchemySessionInterface(ServerSideSessionInterface):
    """Uses the Flask-SQLAlchemy from a flask app as session storage.

    :param app: A Flask app instance.
    :param client: A Flask-SQLAlchemy instance.
    :param key_prefix: A prefix that is added to all storage keys.
    :param use_signer: Whether to sign the session id cookie or not.
    :param permanent: Whether to use permanent session or not.
    :param sid_length: The length of the generated session id in bytes.
    :param serialization_format: The serialization format to use for the session data.
    :param table: The table name you want to use.
    :param sequence: The sequence to use for the primary key if needed.
    :param schema: The db schema to use.
    :param bind_key: The db bind key to use.
    :param cleanup_n_requests: Delete expired sessions on average every N requests.

    .. versionadded:: 0.7
        db changed to client to be standard on all session interfaces.
        The `cleanup_n_request` parameter was added.

    .. versionadded:: 0.6
        The `sid_length`, `sequence`, `schema` and `bind_key` parameters were added.

    .. versionadded:: 0.2
        The `use_signer` parameter was added.
    """
    session_class = SqlAlchemySession
    ttl = ...
    def __init__(self, app: Optional[Flask], client: Optional[SQLAlchemy] = ..., key_prefix: str = ..., use_signer: bool = ..., permanent: bool = ..., sid_length: int = ..., serialization_format: str = ..., table: str = ..., sequence: Optional[str] = ..., schema: Optional[str] = ..., bind_key: Optional[str] = ..., cleanup_n_requests: Optional[int] = ...) -> None:   # type: ignore
        ...
    


